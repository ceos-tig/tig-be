name: CD

on:
  push:
    branches:
      - main
      - develop
#jobs:
#  deploy:
#    runs-on: ubuntu-latest
#    timeout-minutes: 30
#
#    steps:
#      - name: Checkout source code
#        uses: actions/checkout@v2
#
#      - name: set JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'corretto'
#
#      - name: Grant execute permission for gradlew
#        working-directory: server/
#        run: chmod +x gradlew
#
#      - name: Get current time
#        uses: 1466587594/get-current-time@v2
#        id: current-time
#        with:
#          format: YYYY-MM-DDTHH-mm-ss
#          utcOffset: "+09:00"
#
#      - name: Show Current Time
#        run: echo "CurrentTime=${{ steps.current-time.outputs.formattedTime }}"
#        shell: bash
#
#      - name: Build with Gradle
#        working-directory: server/
#        run: ./gradlew clean build -Dspring.profiles.active=deploy -x test  # build with Gradle, excluding tests
#        shell: bash
#
#      - name: List files for debugging
#        working-directory: server/
#        run: ls -al
#        shell: bash
#
#      - name: Generate deployment package
#        working-directory: server/
#        run: |
#          mkdir -p deploy
#          cp build/libs/*.jar deploy/application.jar
#          cp Procfile deploy/Procfile
#          cp -r .ebextensions deploy/.ebextensions
#          cp -r .platform deploy/.platform
#          cd deploy && zip -r deploy.zip .
#
#
#      - name: Beanstalk Deploy
#        uses: einaregilsson/beanstalk-deploy@v20
#        with:
#          aws_access_key: ${{secrets.AWS_ACCESS_KEY}}
#          aws_secret_key: ${{secrets.AWS_SECRET_KEY}}
#          application_name: tig-core-server
#          environment_name: Tig-core-server-env
#          version_label: github-action-${{ steps.current-time.outputs.formattedTime }}
#          region: ap-northeast-2
#          deployment_package: server/deploy/deploy.zip
#          wait_for_environment_recovery: 180

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Docker 로그인 (DockerHub 또는 ECR 등 사용)
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # 3. Docker 빌드 및 푸시
      - name: Build and push Docker image
        run: |
          docker-compose -f docker-compose.yml up --build -d
          docker tag nimikgnoej/tig:latest nimikgnoej/tig:latest
          docker push nimikgnoej/tig

      # 4. 원격 서버에 파일 전송 및 SSH 연결
      - name: SSH to EC2 and run deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ubuntu
          key: ${{ secrets.SERVER_SSH_KEY }}  # EC2 서버의 SSH 프라이빗 키
          script: |
            docker ps -a -q | xargs docker rm --force
            docker images -q | xargs docker rmi --force
            docker pull nimikgnoej/tig
            docker run -d -p 8080:8080 --env-file ./.env nimikgnoej/tig